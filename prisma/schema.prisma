generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  email                String             @unique
  firstName            String
  lastName             String?
  createdAt            DateTime           @default(now())
  image                String?
  trial                Boolean            @default(false)
  hashedPassword       String?
  watchLater           String[]
  trail                Boolean            @default(false)
  extraVideoCount      Int                @default(0)
  referralId           String?
  isVerified           Boolean            @default(false)
  isBanned             Boolean            @default(false)
  UserSubscription     UserSubscription[]
  activeSubscriptionId String?            @db.ObjectId
  activeSubscription   UserSubscription?  @relation(name: "activeSubscription", fields: [activeSubscriptionId], references: [id])
  totalVideoCount      Int                @default(0)
}

model Admin {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String        @unique
  firstName      String
  lastName       String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastLogin      DateTime?
  isActive       Boolean       @default(true)
  image          String?
}

model SubscriptionPlan {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type PlanType @default(paid)

  planId   String? @unique // Razorpay plan ID
  name     String
  price    Float
  interval Int?
  period   Period?

  // Features
  maxRecordingDuration Int     @default(1)
  hasAiFeatures        Boolean @default(false)
  // allowsCustomBranding Boolean @default(false)
  hasAdvancedEditing   Boolean @default(false)

  maxMembers    Int?
  maxVideoCount Int? @default(1)
  maxWorkspaces Int?

  // Status
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  UserSubscription UserSubscription[]
}

enum PlanType {
  free
  paid
}

enum Period {
  daily
  weekly
  monthly
  quarterly
  yearly
}

model UserSubscription {
  id                     String             @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String             @db.ObjectId
  planId                 String             @db.ObjectId
  razorpaySubscriptionId String             @unique // Razorpay subscription ID
  status                 SubscriptionStatus @default(created)
  remainingCount         Int                @default(0) // Remaining cycles or uses
  paidCount              Int                @default(0) // Number of payments made
  totalCount             Int                @default(0) // Total cycles or uses allowed
  amount                 Float // Subscription amount in INR
  shortUrl               String? // Short URL for Razorpay subscription
  notes                  Json? // Map<String, String> as JSON for flexibility
  startDate              DateTime           @default(now()) // Subscription start date
  endDate                DateTime? // Subscription end date (null if ongoing)
  endedAt                DateTime? // Date subscription ended (if cancelled/expired)
  currentStart           DateTime? // Current billing cycle start date
  currentEnd             DateTime? // Current billing cycle end date
  chargeAt               DateTime? // Next charge date
  cancelledAt            DateTime? // Date subscription was cancelled
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  user                   User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  plan                   SubscriptionPlan   @relation(fields: [planId], references: [id])
  usersWithActivePlan    User[]             @relation(name: "activeSubscription")
}

// Define subscription status as an enum for type safety
enum SubscriptionStatus {
  created
  authenticated
  active
  pending
  halted
  cancelled
  completed
  expired
  paused
  resumed
  charged
}

model PromotionalVideo {
  id          String                   @id @default(auto()) @map("_id") @db.ObjectId
  category    PromotionalVideoCategory
  hidden      Boolean                  @default(true)
  videoId     String                   @unique @db.ObjectId
  priority    Int                      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  title       String?
  description String?
  createdBy   String                   @db.ObjectId
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
}

enum PromotionalVideoCategory {
  PROMOTIONAL
  GET_STARTED
}
