// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Resolution {
  RES_240 // 240p: Low resolution, often used for mobile data saving
  RES_360 // 360p: Standard resolution for small screens
  RES_480 // 480p: Standard definition
  RES_720 // 720p: HD Ready
  RES_1080 // 1080p: Full HD
  RES_1440 // 1440p: Quad HD 
  RES_2160 // 2160p: 4K Ultra HD   
}

model User {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  email                String             @unique
  firstName            String
  lastName             String?
  createdAt            DateTime           @default(now())
  image                String?
  trial                Boolean            @default(false)
  hashedPassword       String?
  role                 Role               @default(USER)
  watchLater           String[]
  trail                Boolean            @default(false)
  extraVideoCount      Int                @default(0)
  referralId           String?
  WatchLater           WatchLater[]
  sendedInvites        Invite[]           @relation("Sender")
  receivedInvites      Invite[]           @relation("Receiver")
  Invite               Invite[]
  WatchHistory         WatchHistory[]
  isVerified           Boolean            @default(false)
  isBanned             Boolean            @default(false)
  UserSubscription     UserSubscription[]
  activeSubscriptionId String?            @db.ObjectId
  activeSubscription   UserSubscription?  @relation(name: "activeSubscription", fields: [activeSubscriptionId], references: [id])
  totalVideoCount      Int                @default(0)
}

model WatchLater {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId, videoId])
}

model Invite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId

  @@index([senderId, receiverId])
}

model WatchHistory {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String     @db.ObjectId
  user          User       @relation(fields: [userId], references: [id])
  videoId       String
  isCompleted   Boolean
  lastWatchedAt DateTime
  watchDuration Int
  resolution    Resolution
}

model Admin {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String        @unique
  firstName      String
  lastName       String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastLogin      DateTime?
  isActive       Boolean       @default(true)
  actions        AdminAction[]
  image          String?
}

model AdminAction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String   @db.ObjectId
  admin     Admin    @relation(fields: [adminId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}

model SubscriptionPlan {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type PlanType @default(paid)

  planId   String @unique // Razorpay plan ID
  name     String
  price    Float
  interval Int
  period   Period

  // Features
  maxRecordingDuration Int @default(1)
  hasAiFeatures        Boolean @default(false)
  allowsCustomBranding Boolean @default(false)
  hasAdvancedEditing   Boolean @default(false)

  maxMembers    Int?
  maxVideoCount Int? @default(1)
  maxWorkspaces Int?

  // Status
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  UserSubscription UserSubscription[]
}

enum PlanType {
  free
  paid
}

enum Period {
  daily
  weekly
  monthly
  quarterly
  yearly
}

model UserSubscription {
  id                     String             @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String             @db.ObjectId
  planId                 String             @db.ObjectId
  razorpaySubscriptionId String             @unique // Razorpay subscription ID
  status                 SubscriptionStatus @default(created)
  remainingCount         Int                @default(0) // Remaining cycles or uses
  paidCount              Int                @default(0) // Number of payments made
  totalCount             Int                @default(0) // Total cycles or uses allowed
  amount                 Float // Subscription amount in INR
  shortUrl               String? // Short URL for Razorpay subscription
  notes                  Json? // Map<String, String> as JSON for flexibility
  startDate              DateTime           @default(now()) // Subscription start date
  endDate                DateTime? // Subscription end date (null if ongoing)
  endedAt                DateTime? // Date subscription ended (if cancelled/expired)
  currentStart           DateTime? // Current billing cycle start date
  currentEnd             DateTime? // Current billing cycle end date
  chargeAt               DateTime? // Next charge date
  cancelledAt            DateTime? // Date subscription was cancelled
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  user                   User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  plan                   SubscriptionPlan   @relation(fields: [planId], references: [id])
  usersWithActivePlan    User[]             @relation(name: "activeSubscription")
}

// Define subscription status as an enum for type safety
enum SubscriptionStatus {
  created
  authenticated
  active
  pending
  halted
  cancelled
  completed
  expired
  paused
  resumed
  charged
}
